---
- name: Install nfs-kernel-server
  package:
    name: nfs-kernel-server
    state: present

- name: Create directory to mount disk
  file:
    state: directory
    path: "{{ item.path }}"
    owner: root
    group: root
    mode: "0755"
  loop: "{{ disks }}"

- name: Mount external disk
  ansible.posix.mount:
    path: "{{ item.path }}"
    src: "/dev/{{ item.device }}"
    fstype: ext4
    state: ephemeral
  loop: "{{ disks }}"

- name: Get list of disk paths
  set_fact:
    disk_paths: "{{ disks|map(attribute='path')|list }}"

- name: Ensure /etc/fstab is correctly set for each disk
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: '^UUID={{ item.uuid }}\s'
    line: "UUID={{ item.uuid }} {{ item.mount }} ext4 defaults 0 0"
  with_items: "{{ ansible_mounts }}"
  no_log: true
  when:
    - "'/dev/' in item.device"
    - item.mount in disk_paths

- name: Create directory for Longhorn storage
  file:
    state: directory
    path: "{{ item.path }}/storage"
    owner: root
    group: root
    mode: "0755"
  loop: "{{ disks }}"

- name: Create folder for PVs and backups
  file:
    state: directory
    path: "{{ item[0].path}}/{{ item[1] }}"
  loop: "{{ disks | product(['nfs/backups','nfs/pvs','nfs/pvs/media'])}}"

- name: Create NFS export
  template:
    src: exports.tpl.j2
    dest: /etc/exports
    owner: root
    group: root
    mode: "0644"
  notify: Restart NFS Server

- name: Make exports available
  command: exportfs -rv

- name: Debug disks
  debug:
    var: disks

- name: Get list of disk sizes
  set_fact:
    disks_with_sizes: "{{ disks_with_sizes|default([]) + [ item|combine({'size_in_gib': (ansible_mounts|selectattr('device', 'equalto', '/dev/' + item.device)|first).size_total / (2**30)})] }}"
  loop: "{{ disks }}"
  loop_control:
    loop_var: item

- name: Debug disks_with_sizes
  debug:
    var: disks_with_sizes

- name: Construct cluster_storage dictionary
  set_fact:
    cluster_storage: >-
      {{
        cluster_storage | default({}) |
        combine({
          item.key: item.value.disks
        })
      }}
  loop: "{{ hostvars | dict2items }}"
  when: item.value.disks is defined
  run_once: true
  no_log: true

- name: Debug cluster_storage
  debug:
    var: cluster_storage

- name: Backup terraform.tfvars
  become: false
  ansible.builtin.copy:
    src: ../terraform/terraform.tfvars
    dest: ../terraform/terraform.tfvars.backup.config
    mode: preserve
  delegate_to: localhost

- name: Remove existing nfs_servers definition from terraform.tfvars
  become: false
  local_action:
    module: lineinfile
    dest: "../terraform/terraform.tfvars"
    regexp: '^nfs_servers\s*='
    state: absent
  run_once: true

- name: Append the new nfs_servers definition to terraform.tfvars
  become: false
  local_action:
    module: blockinfile
    dest: "../terraform/terraform.tfvars"
    block: |
      nfs_servers = {
      {% for host, disks in cluster_storage.items() %}
        {% for disk in hostvars[host].disks_with_sizes %}
        "{{ disk.name }}" = {
            longhorn = {{ disk.longhorn | lower }}
            path = "{{ disk.path }}"
            size = "{{ disk.size_in_gib| round(0)| int  }}"
            hostname = "{{ host }}"
            ip = "{{ hostvars[host].ansible_host }}"
          },
        {% endfor %}
      {% endfor %}
      }
    marker: "# {mark} ANSIBLE MANAGED BLOCK for nfs_servers"
  run_once: true

- name: Add label to storage node
  become: false
  local_action:
    module: command kubectl --kubeconfig ~/.kube/config label nodes {{ inventory_hostname }} node.longhorn.io/create-default-disk=true --overwrite

- name: Remove 'default' flag for local-path storage class
  become: false
  local_action:
    module: command kubectl --kubeconfig ~/.kube/config patch storageclass local-path -p '{"metadata":{"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'
