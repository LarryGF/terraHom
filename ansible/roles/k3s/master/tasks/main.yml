---
- name: Copy K3s service file Primary Master
  register: k3s_service
  run_once: true
  template:
    src: "primary.k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644
  vars:
    # using without cluster init even though for multimaster would be needed
    cluster_init: null
    # cluster_init: "--cluster-init"

- name: Register Primary master server
  run_once: true
  set_fact:
    primary_master: "https://{{ ansible_default_ipv4.address }}:6443"
  
- debug:
    var: primary_master

- name: Enable and check K3s service on Primary Master
  when: inventory_hostname == groups['master'][0]
  systemd:
    name: k3s
    daemon_reload: yes
    state: started
    enabled: yes

- name: Wait for node-token
  run_once: true
  wait_for:
    path: "{{ k3s_server_location }}/server/node-token"

- name: Register node-token file access mode
  run_once: true
  stat:
    path: "{{ k3s_server_location }}/server/node-token"
  register: p

- name: Change file access node-token
  run_once: true
  file:
    path: "{{ k3s_server_location }}/server/node-token"
    mode: "g+rx,o+rx"

- name: Read node-token from master
  run_once: true
  slurp:
    path: "{{ k3s_server_location }}/server/node-token"
  register: node_token

- name: Store Master node-token
  run_once: true
  set_fact:
    token: "{{ node_token.content | b64decode | regex_replace('\n', '') }}"

- name: Restore node-token file access
  run_once: true
  file:
    path: "{{ k3s_server_location }}/server/node-token"
    mode: "{{ p.stat.mode }}"

- name: Copy K3s service file Secondary Master
  register: k3s_service
  when: inventory_hostname != groups['master'][0]
  template:
    src: "secondary.k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644

- name: Enable and check K3s service on Secondary Masters
  when: inventory_hostname != groups['master'][0]
  systemd:
    name: k3s
    daemon_reload: yes
    state: started
    enabled: yes

- debug:
    var: ansible_user
    
- name: Create directory .kube
  file:
    path: ~{{ ansible_user }}/.kube
    state: directory
    owner: "{{ ansible_user }}"
    mode: "u=rwx,g=rx,o="

- name: Copy config file to user home directory
  copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~{{ ansible_user }}/.kube/config
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="

- name: Replace https://localhost:6443 by https://master-ip:6443
  command: >-
    k3s kubectl config set-cluster default
      --server=https://{{ master_ip }}:6443
      --kubeconfig ~{{ ansible_user }}/.kube/config
  changed_when: true

- name: Create kubectl symlink
  when: inventory_hostname == groups['master'][0]
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/kubectl
    state: link

- name: Create crictl symlink
  when: inventory_hostname == groups['master'][0]
  file:
    src: /usr/local/bin/k3s
    dest: /usr/local/bin/crictl
    state: link

- name: Update K3s service file Primary Master
  register: k3s_service
  run_once: true
  template:
    src: "primary.k3s.service.j2"
    dest: "{{ systemd_dir }}/k3s.service"
    owner: root
    group: root
    mode: 0644
  vars:
    cluster_init: null

- name: Restart K3s service on Primary Master
  when: inventory_hostname == groups['master'][0]
  systemd:
    name: k3s
    daemon_reload: yes
    state: started
    enabled: yes
