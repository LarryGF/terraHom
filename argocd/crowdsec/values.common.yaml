crowdsec:

  # -- for raw logs format: json or cri (docker|containerd)
  container_runtime: containerd

  image:
    repository: crowdsecurity/crowdsec
    pullPolicy: IfNotPresent
    tag: ""

  # Here you can specify your own custom configuration to be loaded in crowdsec agent or lapi
  # Each config needs to be a multi-line using '|' in YAML specs
  # for the agent those configs will be loaded : parsers, scenarios, postoverflows, simulation.yaml
  # for the lapi those configs will be loaded : profiles.yaml, notifications, console.yaml
  config:
    # -- To better understand stages in parsers, you can take a look at https://docs.crowdsec.net/docs/next/parsers/intro/
    parsers:
      s00-raw: {}
      s01-parse: {}
        # example-parser.yaml: |
        #   filter: "evt.Line.Labels.type == 'myProgram'"
        #   onsuccess: next_stage
        #   ....
      s02-enrich: {}
    # -- to better understand how to write a scenario, you can take a look at https://docs.crowdsec.net/docs/next/scenarios/intro
    scenarios: {}
      # myScenario.yaml: |
      #   type: trigger
      #    name: myName/MyScenario
      #    description: "Detect bruteforce on myService"
      #    filter: "evt.Meta.log_type == 'auth_bf_log'"
      #    ...
    # -- to better understand how to write a postoverflow, you can take a look at (https://docs.crowdsec.net/docs/next/whitelist/create/#whitelist-in-postoverflows)
    postoverflows:
      s00-enrich: {}
        # rdnsEnricher.yaml: |
        #   ...
      s01-whitelist: {}
        # myRdnsWhitelist.yaml: |
        #   ...
    # -- Simulation configuration (https://docs.crowdsec.net/docs/next/scenarios/simulation/)
    simulation.yaml: ""
      #  |
      # simulation: false
      # exclusions:
      #  - crowdsecurity/ssh-bf
    console.yaml: ""
      #   |
      # share_manual_decisions: true
      # share_tainted: true
      # share_custom: true
    capi_whitelists.yaml: ""
      #   |
      # ips:
      # - 1.2.3.4
      # - 2.3.4.5
      # cidrs:
      # - 1.2.3.0/24
    # -- Profiles configuration (https://docs.crowdsec.net/docs/next/profiles/format/#profile-configuration-example)
    profiles.yaml: ""
      #   |
      #  name: default_ip_remediation
      #  debug: true
      #  filters:
      #    - Alert.Remediation == true && Alert.GetScope() == "Ip"
      #  ...
    # -- notifications configuration (https://docs.crowdsec.net/docs/next/notification_plugins/intro)
    notifications: {}
      # email.yaml: |
      #   type: email
      #   name: email_default
      #   One of "trace", "debug", "info", "warn", "error", "off"
      #   log_level: info
      #   ...
      # slack.yaml: ""
      # http.yaml: ""
      # splunk.yaml: ""

  tls:
    enabled: false
    caBundle: true
    insecureSkipVerify: false
    certManager:
      enabled: true
    bouncer:
      secret: "{{ .Release.Name }}-bouncer-tls"
      reflector:
        namespaces: []
    agent:
      tlsClientAuth: true
      secret: "{{ .Release.Name }}-agent-tls"
      reflector:
        namespaces: []
    lapi:
      secret: "{{ .Release.Name }}-lapi-tls"

  # agent will deploy pod on every node as daemonSet to read wanted pods logs
  agent:
    # -- To add custom acquisitions using available datasources (https://docs.crowdsec.net/docs/next/data_sources/intro)
    additionalAcquisition: []
      # - source: kinesis
      #   stream_name: my-stream
      #   labels:
      #     type: mytype
      # - source: syslog
      #   listen_addr: 127.0.0.1
      #   listen_port: 4242
      #   labels:
      #     type: syslog
    
    resources:
      limits:
        memory: 100Mi
      requests:
        cpu: 150m
        memory: 100Mi
    # -- Enable persistent volumes
    persistentVolume:
      # -- Persistent volume for config folder. Stores local config (parsers, scenarios etc.)
      config:
        enabled: true
        accessModes:
          - ReadWriteOnce
        storageClassName: ""
        existingClaim: "crowdsec-agent-config"
        size: 100Mi
    # -- environment variables from crowdsecurity/crowdsec docker image
    env:
      # by default we configure the docker-logs parser to be able to parse docker logs in k8s
      # by default we disable local API on the agent pod
      # - name: SCENARIOS
      #   value: "scenario/name otherScenario/name"
      - name: PARSERS
        value: "crowdsecurity/cri-logs"
      - name: COLLECTIONS
        value: "crowdsecurity/traefik"
      - name: DISABLE_PARSERS
        value: "crowdsecurity/whitelists"
      # - name: POSTOVERFLOWS
      #   value: "postoverflow/name otherPostoverflow/name"
      # - name: CONFIG_FILE
      #   value: "/etc/crowdsec/config.yaml"
      # - name: DSN
      #   value: "file:///var/log/toto.log"
      # - name: TYPE
      #   value: "Labels.type_for_time-machine_mode"
      # - name: TEST_MODE
      #   value: "false"
      # - name: TZ
      #   value: ""
      # - name: DISABLE_AGENT
      #   value: "false"
      # - name: DISABLE_ONLINE_API
      #   value: "false"
      # - name: LEVEL_TRACE
      #   value: "false"
      # - name: LEVEL_DEBUG
      #   value: "false"
      # - name: LEVEL_INFO
      #   value: "false"

    # -- nodeSelector for agent
    nodeSelector: {}
    # -- tolerations for agent
    tolerations: {}

    # -- Enable service monitoring (exposes "metrics" port "6060" for Prometheus)
    metrics:
      enabled: false
      # -- Creates a ServiceMonitor so Prometheus will monitor this service
      # -- Prometheus needs to be configured to watch on all namespaces for ServiceMonitors
      # -- See the documentation: https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#prometheusioscrape
      # -- See also: https://github.com/prometheus-community/helm-charts/issues/106#issuecomment-700847774
      serviceMonitor:
        enabled: false

    service:
      type: ClusterIP
      labels: {}
      annotations: {}
      externalIPs: []
      loadBalancerIP: null
      loadBalancerClass: null
      externalTrafficPolicy: Cluster

    # -- wait-for-lapi init container
    wait_for_lapi:
      image:
        # -- docker image repository name
        repository: busybox
        # -- pullPolicy
        pullPolicy: IfNotPresent
        # -- docker image tag
        tag: "1.28"

  #service: {}

