app-template:
  # defaultPodOptions:
  #   securityContext:
  #     runAsUser: 1001
  #     runAsGroup: 1001
  #     fsGroup: 1001
  #     fsGroupChangePolicy: "OnRootMismatch"
  #     supplementalGroups:
  #       - 65539

  controllers:
    main:
      containers:
        main:
          image:
            repository: linuxserver/jellyfin
            tag: 10.8.12
            pullPolicy: IfNotPresent
          env:
            PUID: 1001
            PGID: 1001
            TZ: ${timezone}
            JELLYFIN_PublishedServerUrl: jellyfin.${domain}
          probes:
            liveness:
              enabled: false
            readiness:
              enabled: false
            startup:
              enabled: false
          %{~ if gpu == "amd" ~}
          resources:
            # requests:
            #   cpu: 15m
            #   memory: 763M
            limits:
              amd.com/gpu: 1
              # cpu: 21m
              # memory: 1687M
          %{~ endif ~}
          %{~ if gpu == "intel" ~}
          resources:
            # requests:
            #   cpu: 15m
            #   memory: 763M
            limits:
              gpu.intel.com/i915: "1"
              # cpu: 21m
              # memory: 1687M 
          %{~ endif ~}
      initContainers:
        update-volume-permission:
          image: 
            repository: busybox
            tag: latest
          command:
            - "sh"
            - "-c"
            - "chmod -R 777 /config"
          securityContext:
            runAsUser: 0

  service:
    main:
      ports:
        http:
          port: 8096

  ingress:
    main:
      enabled: true
      className: "traefik"
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure-ext
        %{~ if mfa ~}
        traefik.ingress.kubernetes.io/router.middlewares: authelia-forwardauth-authelia@kubernetescrd
        %{~ endif ~}
        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "Jellyfin"
        gethomepage.dev/group: "Media"
        gethomepage.dev/icon: "jellyfin.png"
        gethomepage.dev/widget.type: "jellyfin"
        gethomepage.dev/widget.url: "http://jellyfin.${namespace}.svc.cluster.local:8096"
        gethomepage.dev/widget.key: "${api_key}"
        gethomepage.dev/widget.enableBlocks: "true"
      hosts:
        - host: jellyfin.${domain}
          paths:
            - path: /
              service:
                name: main
                port: http
      
      tls:
        - secretName: tls-jellyfin-ingress
          hosts:
            - jellyfin.${domain}

  ${indent(2,yamlencode({persistence: { for key, value in storage: key => {
    "enabled":true,
    "existingClaim":value.name,
    "globalMounts": try(value.mountPath == null ? [{"path":"/app/config"}]: [{"path":value.mountPath}],[{"path":"/app/config"}])}}
    }
    )
    )
    }


  # persistence:
  #   media:
  #     existingClaim: media
  #     globalMounts:
  #       - path: /data
  #   config:
  #     existingClaim: kavita-config
  #     globalMounts:
  #       - path: /config

