kargo:
  ## All settings for the api component.
  api:
    enabled: true
    replicas: 1
    ## The domain name where Kargo's API server will be accessible. This should be
    ## set accurately for a variety of reasons, including (when applicable)
    ## generation of a correct Ingress resource and correct OpenID Connect issuer
    ## and callback URLs.
    ##
    ## Note: The protocol (http vs https) should not be specified and is
    ## automatically inferred by from other configuration options.
    host: kargo.${domain}

    logLevel: INFO

    tls:
      enabled: false
      selfSignedCert: false

    ingress:
      enabled: true
      ## Optionally use annotations specified by your ingress controller's
      ## documentation to customize the behavior of the ingress resource.
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure-ext
        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "Kargo"
        gethomepage.dev/description: ""
        gethomepage.dev/group: "Internal"
        gethomepage.dev/icon: "https://github.com/akuity/kargo/blob/main/kargo-logo.png"
      ## From Kubernetes 1.18+ this field is supported in case your ingress
      ## controller supports it. When set, you do not need to add the ingress
      ## class as annotation.
      ingressClassName: traefik
      tls:
        ## Whether to enable TLS on the Ingress.
        ##
        ## All other settings in this section will be ignored when this is set to
        ## false.
        enabled: false
        ## Whether to generate a self-signed certificate for use with the API
        ## server's Ingress resource.
        ##
        ## If true, cert-manager CRDs MUST be pre-installed on this cluster.
        ## Kargo will create and use its own namespaced issuer.
        ##
        ## If false, a cert secret named
        ## kargo-api-ingress-cert MUST be provided in the same namespace as Kargo.
        selfSignedCert: true

    service:
      ## If you're not going to use an ingress controller, you may want to change
      ## this value to LoadBalancer for production deployments. If running
      ## locally, you may want to change it to NodePort OR leave it as ClusterIP
      ## and use `kubectl port-forward` to map a port on the local network
      ## interface to the service.
      type: ClusterIP
      ## Host port the service will be mapped to when service type is either
      ## NodePort or LoadBalancer. If not specified, Kubernetes chooses.
      # nodePort:

    adminAccount:

      ## Whether to enable the admin account.
      ##
      ## All other settings in this section will be ignored when this is set to
      ## false.
      enabled: true

      ## Bcrypt password hash for the admin account. If specified, will ignore
      ## password setting
      passwordHash:

      ## A password for the admin account. Ignored if passwordHash is set.
      ## It is suggested that you generate this using a password manager or a 
      # command like
      ## `openssl rand -base64 29 | tr -d "=+/" | cut -c1-25`
      password: <admin password>

      ## Key used to sign ID tokens (JWTs) for the admin account. It is suggested
      ## that you generate this using a password manager or a command like
      ## `openssl rand -base64 29 | tr -d "=+/" | cut
      tokenSigningKey: <signing key>
      ## Specifies how long ID tokens for the admin account are valid. i.e.
      ## The expiry will be the time of issue plus this duration.
      tokenTTL: 1h

    ## All settings related to enabling OpenID Connect as an authentication
    ## method.
    oidc:

      ## Whether to enable authentication using Open ID Connect.
      ##
      ## All other settings in this section will be ignored when this is set to
      ## false.
      enabled: false
      
      ## The issuer URL for the identity provider.
      ##
      ## If Dex is enabled, this value will be ignored and the issuer URL will be
      ## automatically configured.
      ##
      ## If Dex is not enabled, this should be set to the issuer URL provided to
      ## you by your identity provider.
      issuerURL: <issuer URL>

      ## The client ID for the OIDC client.
      ## 
      ## If Dex is enabled, this value will be ignored and the client ID will be
      ## automatically configured.
      ##
      ## If Dex is not enabled, this should be set to the client ID provided to
      ## you by your identity provider.
      clientID: <client ID>

      ## The client ID for the OIDC client used by CLI (optional).
      ## 
      ## Needed by some OIDC providers (such as Dex) that require a separate
      ## Client ID for web app login vs. CLI login (http://localhost).
      ##
      ## If Dex is enabled, this value will be ignored and cli client ID will be
      ## automatically configured.
      ##
      ## If Dex is not enabled, and a different client app is configured for
      ## localhost CLI login, this should be the client ID configured in the IdP.
      cliClientID:

      dex:

        ## Whether to enable Dex as the identity provider.
        ##
        ## When set to true, the Kargo installation will include a Dex server and
        ## the Kargo API server will be configured to make the /dex endpoint
        ## a reverse proxy for the Dex server.
        ##
        ## All other settings in this section will be ignored when this is set to
        ## false.
        enabled: false

        image: 
          repository: ghcr.io/dexidp/dex
          tag: v2.37.0
          pullPolicy: IfNotPresent

        tls:
          ## Whether to generate a self-signed certificate for the Dex server.
          ##
          ## If true, cert-manager CRDs MUST be pre-installed on this cluster.
          ## Kargo will create and use its own namespaced issuer.
          ##
          ## If false, a cert secret named kargo-dex-server-cert MUST be provided
          ## in the same namespace as Kargo.
          ##
          ## There is no provision for running Dex without TLS.
          selfSignedCert: true

        ## Whether to skip Dex's own approval screen. Since upstream identity
        ## providers will already request user consent, this second approval
        ## screen from Dex can be both superfluous and confusing.
        skipApprovalScreen: true

        ## Configure Dex connectors to one or more upstream identity providers.
        ## See https://dexidp.io/docs/connectors/ for more information.
        connectors:
        - id: mock
          name: Example
          type: mockCallback
        ## Google Example
        # - id: google
        #   name: Google
        #   type: google
        #   config:
        #     clientID: <your client ID>
        #     clientSecret: <your client secret>
        #     redirectURI: <http(s)>://<api.host>/dex/callback
        ## GitHub Example
        # - id: github
        #   name: GitHub
        #   type: github  
        #   config:
        #     clientID: <your client ID>
        #     clientSecret: <your client secret>
        #     redirectURI: <http(s)>://<api.host>/dex/callback

        resources: {}
          # We usually recommend not to specify default resources and to leave
          # this as a conscious choice for the user. This also increases chances
          # charts run on environments with little resources, such as KinD. If you
          # do want to specify resources, uncomment the following lines, adjust
          # them as necessary, and remove the curly braces after 'resources:'.
          # limits:
          #   cpu: 100m
          #   memory: 128Mi
          # requests:
          #   cpu: 100m
          #   memory: 128Mi

        nodeSelector:
          priority: ${priority}


        tolerations: []

    argocd:
      ## Mapping of Argo CD shards names to URLs to support deep links to
      ## Argo CD URLs. If sharding is not used, map the empty string to the
      ## single Argo CD URL.
      urls:
        "": https://argo.${domain}
        # "shard2": https://argocd2.example.com

    resources: {}
      # We usually recommend not to specify default resources and to leave this as
      # a conscious choice for the user. This also increases chances charts run on
      # environments with little resources, such as KinD. If you do want to
      # specify resources, uncomment the following lines, adjust them as
      # necessary, and remove the curly braces after 'resources:'.
      # limits:
      #   cpu: 100m
      #   memory: 128Mi
      # requests:
      #   cpu: 100m
    #   memory: 128Mi

    nodeSelector:
      priority: ${priority}


    tolerations: []


  webhooks:
    ## Whether to create ValidatingWebhookConfiguration and
    ## MutatingWebhookConfiguration resources. Since these are installed at a
    ## cluster scope, there may be circumstances under which one wishes NOT to
    ## install these. An example would be if Kargo were being hosted in one
    ## cluster, but managing another cluster. In such a case, the
    ## ValidatingWebhookConfiguration and MutatingWebhookConfiguration resources
    ## (as well as CRDs) should be installed into the cluster under management
    ## using the kargo-kit chart.
    register: true

