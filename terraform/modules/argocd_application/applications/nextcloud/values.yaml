nextcloud:
  ## Allowing use of ingress controllers
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    enabled: true
    className: traefik
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      traefik.ingress.kubernetes.io/router.entrypoints: websecure-ext
      # traefik.ingress.kubernetes.io/router.middlewares: services-nextcloud-redirect-caldav@kubernetescrd
      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Nextcloud"
      gethomepage.dev/group: "Home Services"
      gethomepage.dev/icon: "nextcloud.png"
      # gethomepage.dev/widget.type: "nextcloud"
      # gethomepage.dev/widget.url: "http://nextcloud.${namespace}.svc.cluster.local:8080"
      # gethomepage.dev/widget.key: "${api_key}"
    tls:
      - secretName: tls-nextcloud-ingress
        hosts:
          - nextcloud.${domain}
    labels: {}
    path: /
    pathType: ImplementationSpecific


  phpClientHttpsFix:
    enabled: true
    protocol: https

  lifecycle:
    postStartCommand: ["/bin/sh", "-c", "echo \"ServerName nextcloud.${domain}\" | tee -a /etc/apache2/apache2.conf"]

  nextcloud:
    host: nextcloud.${domain}
    username: admin
    password: admin
    ## Use an existing secret
    existingSecret:
      enabled: false
      # secretName: nameofsecret
      # usernameKey: nextcloud-username
      # passwordKey: nextcloud-password
      # tokenKey: nextcloud-token
      # smtpUsernameKey: smtp-username
      # smtpPasswordKey: smtp-password
      # smtpHostKey: smtp-host
    update: 0
    # If web server is not binding default port, you can define it
    containerPort: 80
    datadir: /var/www/html/data
    persistence:
      subPath:
    mail:
      enabled: true
      fromAddress: ${split("@", smtp_sender_email)[0]}
      domain: ${split("@", smtp_sender_email)[1]}
      smtp:
        host: ${smtp_host}
        secure: ssl
        port: ${smtp_port}
        authtype: LOGIN
        name: ${smtp_username}
        password: ${smtp_password}
    # PHP Configuration files
    # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
    phpConfigs: {}
    # Default config files
    # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
    # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/16.0/apache/config
    defaultConfigs:
      # To protect /var/www/html/config
      .htaccess: true
      # Redis default configuration
      redis.config.php: true
      # Apache configuration for rewrite urls
      apache-pretty-urls.config.php: true
      # Define APCu as local cache
      apcu.config.php: true
      # Apps directory configs
      apps.config.php: true
      # Used for auto configure database
      autoconfig.php: true
      # SMTP default configuration
      smtp.config.php: true
    # Extra config files created in /var/www/html/config/
    # ref: https://docs.nextcloud.com/server/15/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
    configs:
      # debug.config.php: |-
      #   <?php
      #   $CONFIG = array (
      #       'debug' => true,
      #   );
      proxy.config.php: |-
        <?php
        $CONFIG = array (
          'trusted_proxies' => array(
          0 => '127.0.0.1',
          1 => '10.42.0.0/16',
        ),
        );
      logging.config.php: |-
        <?php
        $CONFIG = array (
          'loglevel' => 2,
        );
      mail.config.php: |-
        <?php
        $CONFIG = array (
          'mail_smtpdebug' => true,
          'mail_smtptimeout'  => 30, 
          'mail_smtpstreamoptions' =>
          array (
            'ssl' =>
            array (
              'allow_self_signed' => true,
              'verify_peer' => false,
              'verify_peer_name' => false,
            ),
          ),
        );
      locales.config.php: |-
        <?php
        $CONFIG = array (
          'default_phone_region' => 'ES',
        );
      reverseproxy.config.php: |-
        <?php
        $CONFIG = array (
            'overwritehost' => 'nextcloud.${domain}',
            'overwriteprotocol' => 'https',
            'overwrite.cli.url' => 'https://nextcloud.${domain}/'
        );

    # For example, to use S3 as primary storage
    # ref: https://docs.nextcloud.com/server/13/admin_manual/configuration_files/primary_storage.html#simple-storage-service-s3
    #
    #  configs:
    #    s3.config.php: |-
    #      <?php
    #      $CONFIG = array (
    #        'objectstore' => array(
    #          'class' => '\\OC\\Files\\ObjectStore\\S3',
    #          'arguments' => array(
    #            'bucket'     => 'my-bucket',
    #            'autocreate' => true,
    #            'key'        => 'xxx',
    #            'secret'     => 'xxx',
    #            'region'     => 'us-east-1',
    #            'use_ssl'    => true
    #          )
    #        )
    #      );

    ## Strategy used to replace old pods
    ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    strategy:
      type: Recreate
      # type: RollingUpdate
      # rollingUpdate:
      #   maxSurge: 1
      #   maxUnavailable: 0

    ##
    ## Extra environment variables
    extraEnv:
    #  - name: SOME_SECRET_ENV
    #    valueFrom:
    #      secretKeyRef:
    #        name: nextcloud
    #        key: secret_key

    # Extra init containers that runs before pods start.
    extraInitContainers: []
    #  - name: do-something
    #    image: busybox
    #    command: ['do', 'something']

    # Extra sidecar containers.
    extraSidecarContainers: []
    #  - name: nextcloud-logger
    #    image: busybox
    #    command: [/bin/sh, -c, 'while ! test -f "/run/nextcloud/data/nextcloud.log"; do sleep 1; done; tail -n+1 -f /run/nextcloud/data/nextcloud.log']
    #    volumeMounts:
    #    - name: nextcloud-data
    #      mountPath: /run/nextcloud/data

    # Extra mounts for the pods. Example shown is for connecting a legacy NFS volume
    # to NextCloud pods in Kubernetes. This can then be configured in External Storage
    extraVolumes:
    #  - name: nfs
    #    nfs:
    #      server: "10.0.0.1"
    #      path: "/nextcloud_data"
    #      readOnly: false
    extraVolumeMounts:
    #  - name: nfs
    #    mountPath: "/legacy_data"

    # Set securityContext parameters for the nextcloud CONTAINER only (will not affect nginx container).
    # For example, you may need to define runAsNonRoot directive
    securityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: false

    # Set securityContext parameters for the entire pod. For example, you may need to define runAsNonRoot directive
    podSecurityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: false

  ##
  ## MariaDB chart configuration
  ## ref: https://github.com/bitnami/charts/tree/main/bitnami/mariadb
  ##
  mariadb:
    ## Whether to deploy a mariadb server from the bitnami mariab db helm chart
    # to satisfy the applications database requirements. if you want to deploy this bitnami mariadb, set this and externalDatabase to true
    # To use an ALREADY DEPLOYED mariadb database, set this to false and configure the externalDatabase parameters
    enabled: false

    auth:
      database: nextcloud
      username: nextcloud
      password: nextcloud
      rootPassword: nextcloud
      replicationPassword: nextcloud
      forcePassword: true
      # Use existing secret (auth.rootPassword, auth.password, and auth.replicationPassword will be ignored).
      # secret must contain the keys mariadb-root-password, mariadb-replication-password and mariadb-password
      existingSecret: ""

    architecture: standalone

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    primary:
      persistence:
        enabled: true
        existingClaim: "nextcloud-db-config"

  service:
    type: ClusterIP
    port: 8080
    loadBalancerIP: ""
    nodePort: nil

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    # Nextcloud Data (/var/www/html)
    enabled: true
    annotations: {}
    ## nextcloud data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    existingClaim: nextcloud-config

    # accessMode: ReadWriteOnce
    # size: 8Gi

    ## Use an additional pvc for the data directory rather than a subpath of the default PVC
    ## Useful to store data on a different storageClass (e.g. on slower disks)
    nextcloudData:
      enabled: false
      subPath:
      annotations: {}
      # storageClass: "-"
      # existingClaim:
      accessMode: ReadWriteOnce
      size: 8Gi

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi


  nodeSelector:
    priority: ${priority}

  tolerations: []

  affinity: {}

