radarr:

  nodeSelector:
    priority: ${priority}
  # resources:
  #   requests:
  #     cpu: 10m
  #     memory: 248M
  #   limits:
  #     cpu: 200m
  #     memory: 700M
  ingress:
    main:
      ingressClassName: traefik
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure-ext
        %{~ if mfa ~}
        traefik.ingress.kubernetes.io/router.middlewares: authelia-forwardauth-authelia@kubernetescrd
        %{~ endif ~}
        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "Radarr"
        gethomepage.dev/description: "Radarr is a movie collection manager for Usenet and BitTorrent users."
        gethomepage.dev/group: "Aggregators"
        gethomepage.dev/icon: "radarr.png"
        gethomepage.dev/widget.type: "radarr"
        gethomepage.dev/widget.url: "http://radarr.${namespace}.svc.cluster.local:7878"
        gethomepage.dev/widget.key: "${api_key}"
      enabled: true
      hosts:
        - host: "radarr.${domain}"
          paths:
          - path: /
      tls:
        - hosts:
            - "radarr.${domain}"
          secretName: tls-radarr-ingress

  metrics:
    prometheusRule:
      enabled: true

  # persistence:
  #   config:
  #     enabled: true
  #     existingClaim: radarr-config
  #   downloads:
  #     enabled: true
  #     existingClaim: media
  #   downloads-radarr:
  #     enabled: true
  #     existingClaim: media-radarr
  #     mountPath: /downloads/radarr
  #     subpath: radarr    

  initContainers:
    update-volume-permission:
      image: busybox
      command: ["sh", "-c", "chmod -R 777 /config  && mkdir -p /downloads/radarr && chown 1001:1001 /downloads/radarr"]

      volumeMounts:
      - name: config
        mountPath: /config
      - name: downloads 
        mountPath: /downloads
      - name: downloads-radarr
        mountPath: /downloads/radarr
      securityContext:
        runAsUser: 0
  # Generating persistence config from applications.yaml
  ${indent(2,yamlencode({persistence: { for key, value in storage: key => {"enabled":true,"existingClaim":value.name,"mountPath": try(value.mountPath,null),"subpath": try(value.subpath,null)}}}))}