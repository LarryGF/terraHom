app-template:
  defaultPodOptions:
    securityContext:
      runAsUser: 1001
      runAsGroup: 1001
      fsGroup: 1001
      fsGroupChangePolicy: "OnRootMismatch"
      supplementalGroups:
        - 65539
    nodeSelector:
      priority: ${priority}

  configMaps:
    config:
      # -- Enables or disables the configMap
      enabled: true
      # -- Labels to add to the configMap
      labels: {}
      # -- Annotations to add to the configMap
      annotations: {}
      # -- configMap data content. Helm template enabled.
      data:
        .rtorrent.rc: |
          session.use_lock.set = no
          method.insert = cfg.basedir,  private|const|string, (cat,(fs.homedir),"/.local/share/rtorrent/")
          method.insert = cfg.download, private|const|string, (cat,"/downloads/","download/")
          method.insert = cfg.logs,     private|const|string, (cat,(cfg.download),"log/")
          method.insert = cfg.logfile,  private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
          method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),".session/")
          method.insert = cfg.watch,    private|const|string, (cat,(cfg.download),"watch/")
          fs.mkdir.recursive = (cat,(cfg.basedir))
          fs.mkdir = (cat,(cfg.download))
          fs.mkdir = (cat,(cfg.logs))
          fs.mkdir = (cat,(cfg.session))
          fs.mkdir = (cat,(cfg.watch))
          fs.mkdir = (cat,(cfg.watch),"/load")
          fs.mkdir = (cat,(cfg.watch),"/start")
          schedule2 = watch_load, 11, 10, ((load.verbose, (cat, (cfg.watch), "load/*.torrent")))
          schedule2 = watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.watch), "start/*.torrent")))
          dht.add_bootstrap = dht.transmissionbt.com:6881
          dht.add_bootstrap = dht.libtorrent.org:25401
          throttle.max_uploads.set = 100
          throttle.max_uploads.global.set = 250
          throttle.min_peers.normal.set = 20
          throttle.max_peers.normal.set = 60
          throttle.min_peers.seed.set = 30
          throttle.max_peers.seed.set = 80
          trackers.numwant.set = 80
          network.port_range.set = 6881-6881
          network.max_open_files.set = 600
          network.max_open_sockets.set = 300
          pieces.memory.max.set = 1800M
          session.path.set = (cat, (cfg.session))
          directory.default.set = (cat, (cfg.download))
          log.execute = (cat, (cfg.logs), "execute.log")
          encoding.add = utf8
          system.daemon.set = true
          system.umask.set = 0002
          system.cwd.set = (directory.default)
          network.http.max_open.set = 50
          network.http.dns_cache_timeout.set = 25
          network.scgi.open_local = (cat,(cfg.basedir),rtorrent.sock)
          print = (cat, "Logging to ", (cfg.logfile))
          log.open_file = "log", (cfg.logfile)
          log.add_output = "info", "log"
          # Enable the default ratio group.
          ratio.enable=
          # Change the limits, the defaults should be sufficient.
          ratio.min.set=0
          ratio.max.set=0
          ratio.upload.set=1b

          method.insert = d.get_finished_dir, simple, "cat=/downloads/,$d.custom1="
          method.insert = d.data_path, simple, "if=(d.is_multi_file), (cat,(d.directory),/), (cat,(d.directory),/,(d.name))"
          method.insert = d.move_to_complete, simple, "d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,$argument.0=,$argument.1=; d.save_full_session="
          method.set_key = event.download.finished,move_complete,"d.move_to_complete=$d.data_path=,$d.get_finished_dir="
          
          max_peers_seed = 0
  
  controllers:
    main:
      containers:
        main:
          image:
            repository: jesec/rtorrent-flood
            tag: latest
            pullPolicy: IfNotPresent
          env:
            HOME: /config
            TZ: ${timezone}
            FLOOD_OPTION_ALLOWEDPATH: /downloads
            FLOOD_OPTION_HOST: "0.0.0.0"
            FLOOD_OPTION_PORT: "3000"
            FLOOD_OPTION_RTORRENT: "true"
          probes:
            liveness:
              enabled: false
            readiness:
              enabled: false
            startup:
              enabled: false
          # resources:
          #   requests:
          #     cpu: 15m
          #     memory: 183M
          #   limits:
          #     cpu: 1067m
          #     memory: 1488M
      initContainers:
        update-volume-permission:
          image: 
            repository: busybox
            tag: latest
          command:
            - "sh"
            - "-c"
            - |
              cp /tmp/.rtorrent.rc /config/.rtorrent.rc 
              chmod -R 777 /config
              chown 1001:1001 /downloads
          securityContext:
            runAsUser: 0

  service:
    main:
      ports:
        http:
          port: 3000
        rtorrent:
          port: 6881

  ingress:
    main:
      enabled: true
      className: "traefik"
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt
        traefik.ingress.kubernetes.io/router.entrypoints: websecure-ext
        gethomepage.dev/enabled: "true"
        gethomepage.dev/name: "Flood"
        gethomepage.dev/group: "Aggregators"
        gethomepage.dev/icon: "flood.png"
        gethomepage.dev/widget.type: "flood"
        gethomepage.dev/widget.url: "http://flood.${namespace}.svc.cluster.local:3000"
        gethomepage.dev/widget.username: "${flood_username}"
        gethomepage.dev/widget.password: "${flood_password}"
        gethomepage.dev/widget.enableBlocks: "true"
      hosts:
        - host: flood.${domain}
          paths:
            - path: /
              service:
                name: main
                port: http
      
      tls:
        - secretName: tls-flood-ingress
          hosts:
            - flood.${domain}

  ${indent(2,yamlencode({persistence: merge({"rtorrent-flood-config":{"enabled":true,"type":"configMap","name":"flood-config","globalMounts":[{"path":"/tmp/.rtorrent.rc","subPath":".rtorrent.rc","readOnly": false}]}},{ for key, value in storage: key => {
    "enabled":true,
    "existingClaim":value.name,
    "globalMounts": try(value.mountPath == null ? [{"path":"/app/config"}]: [{"path":value.mountPath}],[{"path":"/app/config"}])}})
    }
    )
    )
    }
