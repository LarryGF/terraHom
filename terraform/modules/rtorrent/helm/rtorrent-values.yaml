image:
  tag: latest

initContainers:
  update-volume-permission:
    image: busybox
    command: ["sh", "-c", "chmod -R 777 /config"]
    volumeMounts:
    - name: config
      mountPath: /config
    securityContext:
      runAsUser: 0

nodeSelector:
  # kubernetes.io/arch : arm64
  kubernetes.io/arch : amd64
  
ingress:
  main:
    ingressClassName: traefik
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
    enabled: true
    hosts:
      - host: "rtorrent.${duckdns_domain}.duckdns.org"
        paths:
        - path: /
    tls:
      - hosts:
          - "rtorrent.${duckdns_domain}.duckdns.org"
        secretName: tls-rtorrent-ingress

persistence:
  config:
    enabled: true
    existingClaim: rtorrent-config

  downloads:
    enabled: true
    existingClaim: media

  shared:
    enabled: true
    type: emptyDir
    mountPath: /shared

config: |
  session.use_lock.set = no
  method.insert = cfg.basedir,  private|const|string, (cat,(fs.homedir),"/.local/share/rtorrent/")
  method.insert = cfg.download, private|const|string, (cat,"/downloads/","download/")
  method.insert = cfg.logs,     private|const|string, (cat,(cfg.download),"log/")
  method.insert = cfg.logfile,  private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
  method.insert = cfg.session,  private|const|string, (cat,(cfg.basedir),".session/")
  method.insert = cfg.watch,    private|const|string, (cat,(cfg.download),"watch/")
  fs.mkdir.recursive = (cat,(cfg.basedir))
  fs.mkdir = (cat,(cfg.download))
  fs.mkdir = (cat,(cfg.logs))
  fs.mkdir = (cat,(cfg.session))
  fs.mkdir = (cat,(cfg.watch))
  fs.mkdir = (cat,(cfg.watch),"/load")
  fs.mkdir = (cat,(cfg.watch),"/start")
  schedule2 = watch_load, 11, 10, ((load.verbose, (cat, (cfg.watch), "load/*.torrent")))
  schedule2 = watch_start, 10, 10, ((load.start_verbose, (cat, (cfg.watch), "start/*.torrent")))
  dht.add_bootstrap = dht.transmissionbt.com:6881
  dht.add_bootstrap = dht.libtorrent.org:25401
  throttle.max_uploads.set = 100
  throttle.max_uploads.global.set = 250
  throttle.min_peers.normal.set = 20
  throttle.max_peers.normal.set = 60
  throttle.min_peers.seed.set = 30
  throttle.max_peers.seed.set = 80
  trackers.numwant.set = 80
  network.port_range.set = 6881-6881
  network.max_open_files.set = 600
  network.max_open_sockets.set = 300
  pieces.memory.max.set = 1800M
  session.path.set = (cat, (cfg.session))
  directory.default.set = (cat, (cfg.download))
  log.execute = (cat, (cfg.logs), "execute.log")
  encoding.add = utf8
  system.daemon.set = true
  system.umask.set = 0002
  system.cwd.set = (directory.default)
  network.http.max_open.set = 50
  network.http.dns_cache_timeout.set = 25
  network.scgi.open_local = (cat,(cfg.basedir),rtorrent.sock)
  print = (cat, "Logging to ", (cfg.logfile))
  log.open_file = "log", (cfg.logfile)
  log.add_output = "info", "log"
  # Enable the default ratio group.
  ratio.enable=
  # Change the limits, the defaults should be sufficient.
  ratio.min.set=0
  ratio.max.set=0
  ratio.upload.set=1b

  method.insert = d.get_finished_dir, simple, "cat=/downloads/,$d.custom1="
  method.insert = d.data_path, simple, "if=(d.is_multi_file), (cat,(d.directory),/), (cat,(d.directory),/,(d.name))"
  method.insert = d.move_to_complete, simple, "d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,-u,$argument.0=,$argument.1=; d.save_full_session="
  method.set_key = event.download.finished,move_complete,"d.move_to_complete=$d.data_path=,$d.get_finished_dir="
  
  max_peers_seed = 0

# VPN side-car
addons:
  vpn:
    enabled: true
    type: wireguard
    wireguard:
      image:
        tag: v1.0.20210914

    # -- Reference an existing secret that contains the VPN configuration file
    # The chart expects it to be present under the `vpnConfigfile` key.
    configFileSecret: vpnconfig
    scripts:
      up: |-
        #!/bin/bash
        echo "connected" > /shared/vpnstatus

      down: |-
        #!/bin/bash
        echo "disconnected" > /shared/vpnstatus