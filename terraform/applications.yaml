# This file contains the configuration for applications.
# Make changes with caution!

authelia:
  deploy: true
  name: authelia
  namespace: authelia
  override:
    JWT_TOKEN: ${api_keys["authelia_JWT_TOKEN"]}
    SESSION_ENCRYPTION_KEY: ${api_keys["authelia_SESSION_ENCRYPTION_KEY"]}
    STORAGE_ENCRYPTION_KEY: ${api_keys["authelia_STORAGE_ENCRYPTION_KEY"]}
    domain: ${domain}
    master_hostname: ${master_hostname}
    smtp_host: ${api_keys["smtp_host"]}
    smtp_password: ${api_keys["smtp_password"]}
    smtp_port: ${api_keys["smtp_port"]}
    smtp_sender_email: ${api_keys["smtp_sender_email"]}
    smtp_username: ${api_keys["smtp_username"]}
    timezone: ${timezone}
  priority: critical
  server_side: 'false'
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: authelia-config
      size: 200Mi
    redis-master:
      access_modes:
      - ReadWriteOnce
      create: false
      name: redis-data-master
      size: 200Mi
    redis-replica:
      access_modes:
      - ReadWriteOnce
      create: false
      name: redis-data-replica
      size: 200Mi
bazarr:
  deploy: true
  name: bazarr
  namespace: services
  override:
    api_key: ${api_keys["bazarr_key"]}
    domain: ${domain}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      backup: enabled
      create: true
      name: bazarr-config
      size: 500Mi
    downloads:
      name: media
    downloads-radarr:
      mountPath: /downloads/radarr
      name: media-radarr
      subpath: radarr
crowdsec:
  deploy: false
  name: crowdsec
  namespace: crowdsec
  override:
    api_key: ${api_keys["crowdsec_enrollment_key"]}
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: critical
  server_side: 'false'
  volumes:
    agent_config:
      access_modes:
      - ReadWriteMany
      create: false
      name: crowdsec-agent-config
      size: 500Mi
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: crowdsec-config
      size: 200Mi
    data:
      access_modes:
      - ReadWriteOnce
      create: false
      name: crowdsec-data
      size: 1Gi
dex:
  deploy: false
  name: dex
  namespace: services
  override:
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: ''
  volumes: {}
filebrowser:
  deploy: false
  name: filebrowser
  namespace: services
  override:
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: low
  volumes:
    config:
      access_modes:
      - ReadWriteMany
      create: false
      name: filebrowser-config
      size: 200Mi
flood:
  deploy: true
  name: flood
  namespace: services
  override:
    domain: ${domain}
    flood_password: ${api_keys["flood_password"]}
    flood_username: ${api_keys["flood_username"]}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: true
      mountPath: /config
      name: flood-config
      size: 200Mi
    downloads:
      mountPath: /downloads
      name: media
    downloads-radarr:
      mountPath: /downloads/radarr
      name: media-radarr
      subpath: radarr
gow:
  deploy: false
  name: gow
  namespace: services
  override:
    domain: ${domain}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: gow-config
      size: 100Mi
grafana:
  deploy: true
  name: grafana
  namespace: monitoring
  override:
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: high
  server_side: 'true'
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: grafana-config
      size: 1Gi
home-assistant:
  deploy: true
  name: home-assistant
  namespace: services
  override:
    domain: ${domain}
    gh_token: ${gh_token}
    gh_username: ${gh_username}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: critical
  volumes:
    config:
      access_modes:
      - ReadWriteMany
      backup: enabled
      create: true
      name: ha-config
      size: 5Gi
homepage:
  deploy: true
  name: homepage
  namespace: services
  override:
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: critical
  volumes: {}
jellyfin:
  deploy: true
  name: jellyfin
  namespace: services
  override:
    api_key: ${api_keys["jellyfin_key"]}
    domain: ${domain}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      backup: enabled
      create: true
      mountPath: /config
      name: jellyfin-config
      size: 2Gi
    downloads:
      mountPath: /data
      name: media
    downloads-radarr:
      mountPath: /data/radarr
      name: media-radarr
      subpath: radarr
jellyseerr:
  deploy: true
  name: jellyseerr
  namespace: services
  override:
    api_key: ${api_keys["jellyseerr_key"]}
    domain: ${domain}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: jellyseerr-config
      size: 200Mi
kavita:
  deploy: true
  name: kavita
  namespace: services
  override:
    api_key: ${api_keys["bazarr_key"]}
    domain: ${domain}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      backup: enabled
      create: true
      mountPath: /config
      name: kavita-config
      size: 500Mi
    downloads:
      mountPath: /data
      name: media
kube-prometheus-stack:
  deploy: true
  name: kube-prometheus-stack
  namespace: monitoring
  override:
    api_key: ${api_keys["discord_webhook_url"]}
    domain: ${domain}
    master_hostname: ${master_hostname}
    master_ip: ${master_ip}
    timezone: ${timezone}
  priority: critical
  server_side: 'true'
  volumes: {}
kubeview:
  deploy: false
  name: kubeview
  namespace: services
  override:
    domain: ${domain}
    timezone: ${timezone}
  priority: ''
  volumes:
    config:
      access_modes:
      - ReadWriteMany
      create: false
      name: kubeview-config
      size: 200Mi
kwatch:
  deploy: false
  name: kwatch
  namespace: monitoring
  override:
    api_key: ${api_keys["kwatch_discord_webhook_url"]}
    domain: ${domain}
    master_hostname: ${master_hostname}
    master_ip: ${master_ip}
    timezone: ${timezone}
  priority: ''
  server_side: 'false'
  volumes: {}
loki:
  deploy: false
  name: loki
  namespace: monitoring
  override:
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: low
  volumes: {}
mylar:
  deploy: false
  name: mylar
  namespace: services
  override:
    domain: ${domain}
    timezone: ${timezone}
  priority: low
  volumes:
    config:
      access_modes:
      - ReadWriteMany
      create: false
      name: mylar-config
      size: 200Mi
nextcloud:
  deploy: true
  name: nextcloud
  namespace: services
  override:
    api_key: ${api_keys["nextcloud_key"]}
    domain: ${domain}
    smtp_host: ${api_keys["smtp_host"]}
    smtp_password: ${api_keys["smtp_password"]}
    smtp_port: ${api_keys["smtp_port"]}
    smtp_sender_email: ${api_keys["smtp_sender_email"]}
    smtp_username: ${api_keys["smtp_username"]}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      backup: enabled
      create: true
      name: nextcloud-config
      size: 1Gi
    db:
      access_modes:
      - ReadWriteOnce
      create: false
      name: nextcloud-db-config
      size: 5Gi
nzbget:
  deploy: false
  name: nzbget
  namespace: services
  override:
    domain: ${domain}
    master_hostname: ${master_hostname}
    master_ip: ${master_ip}
    timezone: ${timezone}
  priority: ''
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: nzbget-config
      size: 1Gi
plex:
  deploy: true
  name: plex
  namespace: services
  override:
    allowed_networks: ${allowed_networks}
    api_key: ${api_keys["plex_key"]}
    domain: ${domain}
    master_hostname: ${master_hostname}
    plex_claim_token: ${plex_claim_token}
    timezone: ${timezone}
  priority: critical
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: plex-config
      size: 5Gi
portainer:
  deploy: false
  name: portainer
  namespace: kube-system
  override:
    api_key: ${api_keys["portainer_key"]}
    domain: ${domain}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: portainer-config
      size: 1Gi
promtail:
  deploy: true
  name: promtail
  namespace: monitoring
  override:
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: high
  volumes: {}
prowlarr:
  deploy: true
  name: prowlarr
  namespace: services
  override:
    api_key: ${api_keys["prowlarr_key"]}
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: prowlarr-config
      size: 512Mi
radarr:
  deploy: true
  name: radarr
  namespace: services
  override:
    api_key: ${api_keys["radarr_key"]}
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: radarr-config
      size: 512Mi
rancher:
  deploy: true
  name: rancher
  namespace: cattle-system
  override:
    domain: ${domain}
    letsencrypt_email: ${letsencrypt_email}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteMany
      backup: enabled
      create: true
      name: rancher-config
      size: 1Gi
readarr:
  deploy: false
  name: readarr
  namespace: services
  override:
    domain: ${domain}
    timezone: ${timezone}
  priority: ''
  volumes:
    config:
      access_modes:
      - ReadWriteMany
      create: false
      name: readarr-config
      size: 200Mi
renovate:
  deploy: false
  name: renovate
  namespace: services
  override:
    domain: ${domain}
    gh_token: ${gh_token}
    gh_username: ${gh_username}
    timezone: ${timezone}
  priority: ''
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: renovate-config
      size: 512Mi
sabnzbd:
  deploy: true
  name: sabnzbd
  namespace: services
  override:
    api_key: ${api_keys["sabnzbd_key"]}
    domain: ${domain}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: sabnzbd-config
      size: 200Mi
    downloads:
      name: media
    downloads-radarr:
      mountPath: /downloads/radarr
      name: media-radarr
      subpath: radarr
samba:
  deploy: false
  name: samba
  namespace: services
  override:
    domain: ${domain}
    timezone: ${timezone}
  priority: low
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: samba-config
      size: 100Mi
sonarr:
  deploy: true
  name: sonarr
  namespace: services
  override:
    api_key: ${api_keys["sonarr_key"]}
    domain: ${domain}
    master_hostname: ${master_hostname}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: false
      name: sonarr-config
      size: 512Mi
tautulli:
  deploy: true
  name: tautulli
  namespace: services
  override:
    domain: ${domain}
    api_key: ${api_keys["tautulli_key"]}
    timezone: ${timezone}
  priority: high
  volumes:
    config:
      access_modes:
      - ReadWriteOnce
      create: true
      name: tautulli-config
      size: 200Mi
